<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mysql]]></title>
    <url>%2F2018%2F07%2F16%2Fmysql%2F</url>
    <content type="text"><![CDATA[mysql常用数据库，经典关系型数据库，其他关系型数据库类似。 安装12ubuntu：sudo apt install mysql-server，mysql-client，libmysqlclient-devcentos7: sudo yum install 配置12ubuntu位置：/etc/mysql/centos位置：/etc/my.cnf 防火墙开放端口centos7123firewall-cmd --zone=public --add-port=3306/tcp --permanent # 开启3306端口firewall-cmd --zone=public --add-port=3309-3316/tcp --permanent # 批量开启3309-3316端口 firewall-cmd --reload # 防火墙重新加载 Docker创建docker官方镜像地址123456789101112131415mkdir -p /home/mysql01 # 创建数据目录vi /home/mysqlconf # 创建配置文件docker pull mysql # 拉取mysql镜像docker run --name mysql01 \ -v /home/mysqlconf:/etc/mysql/conf.d \ -v /home/mysql01/data:/var/lib/mysql \ -v /home/mysql01/log:/var/log \ -e MYSQL_ROOT_PASSWORD=12345678 \ # 创建root密码 -p 3306:3306 \ -d mysql:5.7.22 \ # 具体根据实际下载镜像进行相应修改 --character-set-server=utf8mb4 \ --collation-server=utf8mb4_unicode_cidocker ps # 查看正在运行的容器docker ps -a # 查看所有容器(包含启动失败和停止运行的容器)docker exec -it 容器名 sh # 进入容器内部 常用命令连接12345mysql -uUSER -pPASSWORD -hIP -PPORT # 连接mysql -h192.168.12.246 -P8066 -u root -p12345678 allblockinfo_development -e "select * from token_info" &gt;/java/test/token_info.csv # 导出数据 mysqldump -u dbuser -p dbname &gt; dbname.sql # 导出sql语句，导出数据库mysqldump -u dbuser -p dbname users&gt; dbname_users.sql # 导出sql语句 导出数据表mysql -uabc_f -p abc &lt; abc.sql # 导入sql语句 常用sql12345678DROP DATABASE DATABASENAME; # 删库CREATE DATABASE DATABASENAME; # 建库show variables like "secure_file_priv"; # 查看secure_file_priv位置，导入相关load data infile '/java/test/mycat_block.csv' into table block(height,**)fields terminated by ":"lines terminated by "\n"; # 导入数据。# 1、需要注意的是导入只能导入/var/lib/mysql-files(ubuntu默认)的文件。具体位置要看mysql的secure_file_priv位置。# 2、mycat导入有区别是必须列出所有列名，mysql可以列出所有也可以不列。source d:/dbname.sql # 导入sql 集群中间件-mycat官方文档1234# 说明：mycat是阿里开源的产品，后期由社区自己维护。实现原理主要为解析mysql在不同的数据库中并行执行对应的sql。# 功能: mysql分库分表中间件。# 重点：分库规则。常用一致性哈希，方便扩展。分库字段应该为常用查询字段，对于多字段关键查询结构不太适合。另外分库规则常常和id相关，即对字符串支持不是特别友好。# 常用配置：三大配置rule.xml，schema.xml，server.xml。 server.xml1# 修改性能参数，主要和jvm的参数相关，另外设置mycat连接的用户名密码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!-- - - Licensed under the Apache License, Version 2.0 (the "License"); - you may not use this file except in compliance with the License. - You may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0 - - Unless required by applicable law or agreed to in writing, software - distributed under the License is distributed on an "AS IS" BASIS, - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the License for the specific language governing permissions and - limitations under the License. --&gt;&lt;!DOCTYPE mycat:server SYSTEM "server.dtd"&gt;&lt;mycat:server xmlns:mycat="http://io.mycat/"&gt; &lt;system&gt; &lt;property name="useSqlStat"&gt;0&lt;/property&gt; &lt;!-- 1为开启实时统计、0为关闭 --&gt; &lt;property name="useGlobleTableCheck"&gt;0&lt;/property&gt; &lt;!-- 1为开启全加班一致性检测、0为关闭 --&gt; &lt;property name="sequnceHandlerType"&gt;2&lt;/property&gt; &lt;!-- 全局ID生成方式。(0:为本地文件方式，1:为数据库方式；2:为时间戳序列方式；3:为ZK生成ID；4:为ZK递增ID生成。 --&gt; &lt;!-- &lt;property name="useCompression"&gt;1&lt;/property&gt; --&gt; &lt;!--是否开启mysql压缩协议。1为开启，0为关闭，默认关闭。--&gt; &lt;!-- &lt;property name="fakeMySQLVersion"&gt;5.6.20&lt;/property&gt;--&gt; &lt;!--设置模拟的MySQL版本号--&gt; &lt;!-- &lt;property name="packetHeaderSize"&gt;4&lt;/property&gt; --&gt; &lt;!-- 指定 Mysql 协议中的报文头长度。默认 4。 --&gt; &lt;!-- &lt;property name="processorBufferChunk"&gt;40960&lt;/property&gt; --&gt; &lt;!-- 每次读取留的数量，默认4096。 --&gt; &lt;!-- &lt;property name="processors"&gt;1&lt;/property&gt; --&gt; &lt;!-- 处理线程数量，默认是CPU数量 --&gt; &lt;!-- &lt;property name="processorBufferPool"&gt;409600&lt;/property&gt; --&gt; &lt;!-- 创建共享buffer需要占用的总空间大小。processorBufferChunk*processors*100。 --&gt; &lt;property name="processorBufferPoolType"&gt;0&lt;/property&gt; &lt;!--默认为type 0: DirectByteBufferPool | type 1 ByteBufferArena--&gt; &lt;!-- &lt;property name="processorBufferLocalPercent"&gt;100&lt;/property&gt; --&gt; &lt;!-- 二级共享buffer是processorBufferPool的百分比，这里设置的是百分比。 --&gt; &lt;!-- &lt;property name="processorExecutor"&gt;32&lt;/property&gt; --&gt; &lt;!--默认是65535 64K 用于sql解析时最大文本长度 --&gt; &lt;!--&lt;property name="maxStringLiteralLength"&gt;65535&lt;/property&gt;--&gt; &lt;!--&lt;property name="backSocketNoDelay"&gt;1&lt;/property&gt;--&gt; &lt;!--&lt;property name="frontSocketNoDelay"&gt;1&lt;/property&gt;--&gt; &lt;!--&lt;property name="processorExecutor"&gt;16&lt;/property&gt;--&gt; &lt;!-- &lt;property name="serverPort"&gt;8066&lt;/property&gt; &lt;property name="managerPort"&gt;9066&lt;/property&gt; &lt;property name="idleTimeout"&gt;300000&lt;/property&gt; &lt;property name="bindIp"&gt;0.0.0.0&lt;/property&gt; &lt;property name="frontWriteQueueSize"&gt;4096&lt;/property&gt; &lt;property name="processors"&gt;32&lt;/property&gt; --&gt; &lt;!--分布式事务开关，0为不过滤分布式事务，1为过滤分布式事务（如果分布式事务内只涉及全局表，则不过滤），2为不过滤分布式事务,但是记录分布式事务日志--&gt; &lt;property name="handleDistributedTransactions"&gt;0&lt;/property&gt; &lt;!-- off heap for merge/order/group/limit 1开启 0关闭 --&gt; &lt;property name="useOffHeapForMerge"&gt;1&lt;/property&gt; &lt;!-- 单位为m --&gt; &lt;property name="memoryPageSize"&gt;1m&lt;/property&gt; &lt;!-- 单位为k --&gt; &lt;property name="spillsFileBufferSize"&gt;1k&lt;/property&gt; &lt;property name="useStreamOutput"&gt;0&lt;/property&gt; &lt;!-- 单位为m --&gt; &lt;property name="systemReserveMemorySize"&gt;384m&lt;/property&gt; &lt;!--是否采用zookeeper协调切换 --&gt; &lt;property name="useZKSwitch"&gt;true&lt;/property&gt; &lt;/system&gt; &lt;!-- 全局SQL防火墙设置 --&gt; &lt;!-- &lt;firewall&gt; &lt;whitehost&gt; &lt;host host="127.0.0.1" user="mycat"/&gt; &lt;host host="127.0.0.2" user="mycat"/&gt; &lt;/whitehost&gt; &lt;blacklist check="false"&gt; &lt;/blacklist&gt; &lt;/firewall&gt; --&gt; &lt;user name="root"&gt; &lt;property name="password"&gt;12345678&lt;/property&gt; &lt;property name="schemas"&gt;allblockinfo_development&lt;/property&gt; &lt;!-- &lt;property name="readOnly"&gt;true&lt;/property&gt; --&gt; &lt;!-- 表级 DML 权限设置 --&gt; &lt;!-- &lt;privileges check="false"&gt; &lt;schema name="TESTDB" dml="0110" &gt; 属性依次为insert，update，select，delete，该设置表示tb01啥都不能干，tb02啥都能干，其他表只能更新查询. &lt;table name="tb01" dml="0000"&gt;&lt;/table&gt; &lt;table name="tb02" dml="1111"&gt;&lt;/table&gt; &lt;/schema&gt; &lt;/privileges&gt; --&gt; &lt;/user&gt;&lt;/mycat:server&gt; schema.xml1234# 创建mycat的表结构，主要用来分库分表，以及和mysql的表结构对应# schema:mycat表结构# dataNode：mycat数据节点# dataHost: mysql物理节点 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt;&lt;mycat:schema xmlns:mycat="http://io.mycat/"&gt; &lt;schema name="allblockinfo_development" checkSQLschema="true"&gt; &lt;table name="address_ens" primaryKey="address" dataNode="abi_dn1,abi_dn2,abi_dn3" rule="address" /&gt; &lt;/schema&gt; &lt;!-- &lt;dataNode name="dn1$0-743" dataHost="localhost1" database="db$0-743" /&gt; --&gt; &lt;dataNode name="abi_dn1" dataHost="actural1" database="allblockinfo_development" /&gt; &lt;dataNode name="abi_dn2" dataHost="actural2" database="allblockinfo_development" /&gt; &lt;dataNode name="abi_dn3" dataHost="actural3" database="allblockinfo_development" /&gt; &lt;dataHost name="actural1" maxCon="2000" minCon="10" balance="0" writeType="1" dbType="mysql" dbDriver="native" switchType="1" slaveThreshold="100"&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;!-- can have multi write hosts --&gt; &lt;writeHost host="hostM1" url="192.168.12.240:3306" user="root" password="12345678"&gt; &lt;!-- can have multi read hosts --&gt; &lt;readHost host="hostS2" url="192.168.12.240:3306" user="root" password="12345678" /&gt; &lt;/writeHost&gt; &lt;/dataHost&gt; &lt;dataHost name="actural2" maxCon="2000" minCon="10" balance="0" writeType="1" dbType="mysql" dbDriver="native" switchType="1" slaveThreshold="100"&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;!-- can have multi write hosts --&gt; &lt;writeHost host="hostM1" url="192.168.12.241:3306" user="root" password="12345678"&gt; &lt;!-- can have multi read hosts --&gt; &lt;readHost host="hostS2" url="192.168.12.241:3306" user="root" password="12345678" /&gt; &lt;/writeHost&gt; &lt;/dataHost&gt; &lt;dataHost name="actural3" maxCon="2000" minCon="10" balance="0" writeType="1" dbType="mysql" dbDriver="native" switchType="1" slaveThreshold="100"&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;!-- can have multi write hosts --&gt; &lt;writeHost host="hostM1" url="192.168.12.242:3306" user="root" password="12345678"&gt; &lt;!-- can have multi read hosts --&gt; &lt;readHost host="hostS2" url="192.168.12.242:3306" user="root" password="12345678" /&gt; &lt;/writeHost&gt; &lt;/dataHost&gt;&lt;/mycat:schema&gt; rule.xml官方规则讲解9.5 Mycat 常用的分片规则12# tableRule:数据表规则# function:分表算法 12345678910&lt;tableRule name="block"&gt; &lt;rule&gt; &lt;columns&gt;height&lt;/columns&gt; &lt;algorithm&gt;rang-long&lt;/algorithm&gt; &lt;/rule&gt;&lt;/tableRule&gt;&lt;function name="rang-long" class="io.mycat.route.function.AutoPartitionByLong"&gt; &lt;property name="mapFile"&gt;autopartition-long.txt&lt;/property&gt;&lt;/function&gt; 日志配置(log4j2.xml)1# 主要修改asyncRoot level="debug",默认为info,debug将输出具体的sql语句等详细信息 1234567891011121314151617181920212223242526272829303132&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;Configuration status="WARN"&gt; &lt;Appenders&gt; &lt;Console name="Console" target="SYSTEM_OUT"&gt; &lt;PatternLayout pattern="%d [%-5p][%t] %m %throwable&#123;full&#125; (%C:%F:%L) %n"/&gt; &lt;/Console&gt; &lt;RollingFile name="RollingFile" fileName="$&#123;sys:MYCAT_HOME&#125;/logs/mycat.log" filePattern="$&#123;sys:MYCAT_HOME&#125;/logs/$$&#123;date:yyyy-MM&#125;/mycat-%d&#123;MM-dd&#125;-%i.log.gz"&gt; &lt;PatternLayout&gt; &lt;Pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %5p [%t] (%l) - %m%n&lt;/Pattern&gt; &lt;/PatternLayout&gt; &lt;Policies&gt; &lt;OnStartupTriggeringPolicy/&gt; &lt;SizeBasedTriggeringPolicy size="250 MB"/&gt; &lt;TimeBasedTriggeringPolicy/&gt; &lt;/Policies&gt; &lt;/RollingFile&gt; &lt;/Appenders&gt; &lt;Loggers&gt; &lt;!--&lt;AsyncLogger name="io.mycat" level="info" includeLocation="true" additivity="false"&gt;--&gt; &lt;!--&lt;AppenderRef ref="Console"/&gt;--&gt; &lt;!--&lt;AppenderRef ref="RollingFile"/&gt;--&gt; &lt;!--&lt;/AsyncLogger&gt;--&gt; &lt;asyncRoot level="debug" includeLocation="true"&gt; &lt;AppenderRef ref="Console" /&gt; &lt;AppenderRef ref="RollingFile"/&gt; &lt;/asyncRoot&gt; &lt;/Loggers&gt;&lt;/Configuration&gt;]]></content>
      <tags>
        <tag>mysql docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[第一条测试]]></title>
    <url>%2F2018%2F07%2F09%2F%E7%AC%AC%E4%B8%80%E6%9D%A1%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[一些有用的链接这是第一条测试博客。大概描述hexo+github的博客创建过程。一般推荐hexo或者jekyll，这里之所以用hexo是因为文档中文，对中文支持友好。hexo官网 hexo文档 hexo官方仓库 支持markdown本地工具仓库 可以写个bat脚本方便启动，注意bat里设置npm环境变量，否则普通的bat可能有问题。稍后贴个连接到bat脚本。 hexo主题 不同的主题，配套使用 步骤1、安装node.js在官网下载安装node.js，注意添加到环境变量中。首页会有两个版本，左边的是稳定本，稳定兼容。 2、下载hexo官方仓库12345npm install -g hexo-clihexo init blog # 初始化hexo项目。生成第一篇helloworld博客。cd blog # 进入博客文件夹hexo server # 启动服务hexo generate # 生成静态文件 3、创建博客1hexo new "My New Post" hexo新建博客可以查阅第一篇helloworld博客。内有hexo生成的详细步骤。这里不再赘述。 4、重要命令12345678910111213141516# 常用命令hexo new "postName" #新建文章，在source/_posts目录下，单页面创建。hexo new page "pageName" #新建页面，会建在source目录下，与标签、关于等同级。hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本# 缩写hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy# 组合命令hexo s -g #生成并本地预览hexo d -g #生成并上传 5、主题样式推荐使用next，在当前目录下克隆next库1git clone https://github.com/iissnan/hexo-theme-next themes/next 注意：所有配置请小心空格 1、修改主题，next_config.yml，修改theme: next 2、主题设定，next_config.yml scheme: Gemini 3、语言设定，_config.yml language: zh-Hans 4、设置头像，_config.yml avatar: /images/blog-logo.jpg(本地路径/source/image/blog-logo.jpg) 5、代码主题，next_config.yml highlight_theme: nomal/night 6、添加标签页面，next_config.yml tags: /tags/ || tags(添加其他选项雷同，有默认配置)12hexo new page tags# 打开index.md添加type: "tags"]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
